// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: practice.employee.proto

#include "practice.employee.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace practice {
class EmployeeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Employee>
      _instance;
} _Employee_default_instance_;
}  // namespace practice
namespace protobuf_practice_2eemployee_2eproto {
void InitDefaultsEmployeeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::practice::_Employee_default_instance_;
    new (ptr) ::practice::Employee();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::practice::Employee::InitAsDefaultInstance();
}

void InitDefaultsEmployee() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEmployeeImpl);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::practice::Employee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::practice::Employee, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::practice::Employee, salary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::practice::Employee, empno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::practice::Employee, dept_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::practice::Employee, jobtitle_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::practice::Employee)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::practice::_Employee_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "practice.employee.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027practice.employee.proto\022\010practice\"\177\n\010E"
      "mployee\022\n\n\002id\030\001 \001(\005\022\016\n\006salary\030\002 \001(\001\022\r\n\005e"
      "mpno\030\003 \001(\t\022\"\n\004dept\030\004 \001(\0162\024.practice.Depa"
      "rtment\022$\n\010jobtitle\030\005 \001(\0162\022.practice.JobT"
      "itle*>\n\nDepartment\022\017\n\013NetworkDept\020\000\022\016\n\nM"
      "arketDept\020\001\022\017\n\013FinanceDept\020\002*1\n\010JobTitle"
      "\022\013\n\007Staffer\020\000\022\n\n\006Leader\020\001\022\014\n\010Director\020\002b"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 287);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "practice.employee.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_practice_2eemployee_2eproto
namespace practice {
const ::google::protobuf::EnumDescriptor* Department_descriptor() {
  protobuf_practice_2eemployee_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_practice_2eemployee_2eproto::file_level_enum_descriptors[0];
}
bool Department_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JobTitle_descriptor() {
  protobuf_practice_2eemployee_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_practice_2eemployee_2eproto::file_level_enum_descriptors[1];
}
bool JobTitle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Employee::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Employee::kIdFieldNumber;
const int Employee::kSalaryFieldNumber;
const int Employee::kEmpnoFieldNumber;
const int Employee::kDeptFieldNumber;
const int Employee::kJobtitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Employee::Employee()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_practice_2eemployee_2eproto::InitDefaultsEmployee();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:practice.Employee)
}
Employee::Employee(const Employee& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  empno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.empno().size() > 0) {
    empno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.empno_);
  }
  ::memcpy(&salary_, &from.salary_,
    static_cast<size_t>(reinterpret_cast<char*>(&jobtitle_) -
    reinterpret_cast<char*>(&salary_)) + sizeof(jobtitle_));
  // @@protoc_insertion_point(copy_constructor:practice.Employee)
}

void Employee::SharedCtor() {
  empno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&salary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jobtitle_) -
      reinterpret_cast<char*>(&salary_)) + sizeof(jobtitle_));
  _cached_size_ = 0;
}

Employee::~Employee() {
  // @@protoc_insertion_point(destructor:practice.Employee)
  SharedDtor();
}

void Employee::SharedDtor() {
  empno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Employee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Employee::descriptor() {
  ::protobuf_practice_2eemployee_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_practice_2eemployee_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Employee& Employee::default_instance() {
  ::protobuf_practice_2eemployee_2eproto::InitDefaultsEmployee();
  return *internal_default_instance();
}


void Employee::Clear() {
// @@protoc_insertion_point(message_clear_start:practice.Employee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  empno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&salary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jobtitle_) -
      reinterpret_cast<char*>(&salary_)) + sizeof(jobtitle_));
  _internal_metadata_.Clear();
}

bool Employee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:practice.Employee)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double salary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &salary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string empno = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_empno()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->empno().data(), static_cast<int>(this->empno().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "practice.Employee.empno"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .practice.Department dept = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dept(static_cast< ::practice::Department >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .practice.JobTitle jobtitle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_jobtitle(static_cast< ::practice::JobTitle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:practice.Employee)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:practice.Employee)
  return false;
#undef DO_
}

void Employee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:practice.Employee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // double salary = 2;
  if (this->salary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->salary(), output);
  }

  // string empno = 3;
  if (this->empno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->empno().data(), static_cast<int>(this->empno().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "practice.Employee.empno");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->empno(), output);
  }

  // .practice.Department dept = 4;
  if (this->dept() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->dept(), output);
  }

  // .practice.JobTitle jobtitle = 5;
  if (this->jobtitle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->jobtitle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:practice.Employee)
}

::google::protobuf::uint8* Employee::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:practice.Employee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // double salary = 2;
  if (this->salary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->salary(), target);
  }

  // string empno = 3;
  if (this->empno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->empno().data(), static_cast<int>(this->empno().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "practice.Employee.empno");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->empno(), target);
  }

  // .practice.Department dept = 4;
  if (this->dept() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->dept(), target);
  }

  // .practice.JobTitle jobtitle = 5;
  if (this->jobtitle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->jobtitle(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:practice.Employee)
  return target;
}

size_t Employee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:practice.Employee)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string empno = 3;
  if (this->empno().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->empno());
  }

  // double salary = 2;
  if (this->salary() != 0) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // .practice.Department dept = 4;
  if (this->dept() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dept());
  }

  // .practice.JobTitle jobtitle = 5;
  if (this->jobtitle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->jobtitle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Employee::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:practice.Employee)
  GOOGLE_DCHECK_NE(&from, this);
  const Employee* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Employee>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:practice.Employee)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:practice.Employee)
    MergeFrom(*source);
  }
}

void Employee::MergeFrom(const Employee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:practice.Employee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.empno().size() > 0) {

    empno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.empno_);
  }
  if (from.salary() != 0) {
    set_salary(from.salary());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.dept() != 0) {
    set_dept(from.dept());
  }
  if (from.jobtitle() != 0) {
    set_jobtitle(from.jobtitle());
  }
}

void Employee::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:practice.Employee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Employee::CopyFrom(const Employee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:practice.Employee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Employee::IsInitialized() const {
  return true;
}

void Employee::Swap(Employee* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Employee::InternalSwap(Employee* other) {
  using std::swap;
  empno_.Swap(&other->empno_);
  swap(salary_, other->salary_);
  swap(id_, other->id_);
  swap(dept_, other->dept_);
  swap(jobtitle_, other->jobtitle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Employee::GetMetadata() const {
  protobuf_practice_2eemployee_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_practice_2eemployee_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace practice
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::practice::Employee* Arena::Create< ::practice::Employee >(Arena* arena) {
  return Arena::CreateInternal< ::practice::Employee >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
