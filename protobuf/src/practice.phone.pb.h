// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: practice.phone.proto

#ifndef PROTOBUF_practice_2ephone_2eproto_INCLUDED
#define PROTOBUF_practice_2ephone_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_practice_2ephone_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPhoneImpl();
void InitDefaultsPhone();
inline void InitDefaults() {
  InitDefaultsPhone();
}
}  // namespace protobuf_practice_2ephone_2eproto
namespace practice {
class Phone;
class PhoneDefaultTypeInternal;
extern PhoneDefaultTypeInternal _Phone_default_instance_;
}  // namespace practice
namespace google {
namespace protobuf {
template<> ::practice::Phone* Arena::Create< ::practice::Phone>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace practice {

enum ServiceProvider {
  ChinaMobile = 0,
  ChinaUnicom = 1,
  ChinaTelecom = 2,
  ServiceProvider_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServiceProvider_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServiceProvider_IsValid(int value);
const ServiceProvider ServiceProvider_MIN = ChinaMobile;
const ServiceProvider ServiceProvider_MAX = ChinaTelecom;
const int ServiceProvider_ARRAYSIZE = ServiceProvider_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServiceProvider_descriptor();
inline const ::std::string& ServiceProvider_Name(ServiceProvider value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServiceProvider_descriptor(), value);
}
inline bool ServiceProvider_Parse(
    const ::std::string& name, ServiceProvider* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceProvider>(
    ServiceProvider_descriptor(), name, value);
}
// ===================================================================

class Phone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:practice.Phone) */ {
 public:
  Phone();
  virtual ~Phone();

  Phone(const Phone& from);

  inline Phone& operator=(const Phone& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Phone(Phone&& from) noexcept
    : Phone() {
    *this = ::std::move(from);
  }

  inline Phone& operator=(Phone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Phone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Phone* internal_default_instance() {
    return reinterpret_cast<const Phone*>(
               &_Phone_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Phone* other);
  friend void swap(Phone& a, Phone& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Phone* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Phone>(NULL);
  }

  Phone* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Phone>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Phone& from);
  void MergeFrom(const Phone& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Phone* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string phonenumber = 2;
  void clear_phonenumber();
  static const int kPhonenumberFieldNumber = 2;
  const ::std::string& phonenumber() const;
  void set_phonenumber(const ::std::string& value);
  #if LANG_CXX11
  void set_phonenumber(::std::string&& value);
  #endif
  void set_phonenumber(const char* value);
  void set_phonenumber(const char* value, size_t size);
  ::std::string* mutable_phonenumber();
  ::std::string* release_phonenumber();
  void set_allocated_phonenumber(::std::string* phonenumber);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // .practice.ServiceProvider provider = 3;
  void clear_provider();
  static const int kProviderFieldNumber = 3;
  ::practice::ServiceProvider provider() const;
  void set_provider(::practice::ServiceProvider value);

  // int32 area_code = 4;
  void clear_area_code();
  static const int kAreaCodeFieldNumber = 4;
  ::google::protobuf::int32 area_code() const;
  void set_area_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:practice.Phone)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr phonenumber_;
  ::google::protobuf::int32 id_;
  int provider_;
  ::google::protobuf::int32 area_code_;
  mutable int _cached_size_;
  friend struct ::protobuf_practice_2ephone_2eproto::TableStruct;
  friend void ::protobuf_practice_2ephone_2eproto::InitDefaultsPhoneImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Phone

// int32 id = 1;
inline void Phone::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Phone::id() const {
  // @@protoc_insertion_point(field_get:practice.Phone.id)
  return id_;
}
inline void Phone::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:practice.Phone.id)
}

// string phonenumber = 2;
inline void Phone::clear_phonenumber() {
  phonenumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Phone::phonenumber() const {
  // @@protoc_insertion_point(field_get:practice.Phone.phonenumber)
  return phonenumber_.GetNoArena();
}
inline void Phone::set_phonenumber(const ::std::string& value) {
  
  phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:practice.Phone.phonenumber)
}
#if LANG_CXX11
inline void Phone::set_phonenumber(::std::string&& value) {
  
  phonenumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:practice.Phone.phonenumber)
}
#endif
inline void Phone::set_phonenumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:practice.Phone.phonenumber)
}
inline void Phone::set_phonenumber(const char* value, size_t size) {
  
  phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:practice.Phone.phonenumber)
}
inline ::std::string* Phone::mutable_phonenumber() {
  
  // @@protoc_insertion_point(field_mutable:practice.Phone.phonenumber)
  return phonenumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Phone::release_phonenumber() {
  // @@protoc_insertion_point(field_release:practice.Phone.phonenumber)
  
  return phonenumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Phone::set_allocated_phonenumber(::std::string* phonenumber) {
  if (phonenumber != NULL) {
    
  } else {
    
  }
  phonenumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phonenumber);
  // @@protoc_insertion_point(field_set_allocated:practice.Phone.phonenumber)
}

// .practice.ServiceProvider provider = 3;
inline void Phone::clear_provider() {
  provider_ = 0;
}
inline ::practice::ServiceProvider Phone::provider() const {
  // @@protoc_insertion_point(field_get:practice.Phone.provider)
  return static_cast< ::practice::ServiceProvider >(provider_);
}
inline void Phone::set_provider(::practice::ServiceProvider value) {
  
  provider_ = value;
  // @@protoc_insertion_point(field_set:practice.Phone.provider)
}

// int32 area_code = 4;
inline void Phone::clear_area_code() {
  area_code_ = 0;
}
inline ::google::protobuf::int32 Phone::area_code() const {
  // @@protoc_insertion_point(field_get:practice.Phone.area_code)
  return area_code_;
}
inline void Phone::set_area_code(::google::protobuf::int32 value) {
  
  area_code_ = value;
  // @@protoc_insertion_point(field_set:practice.Phone.area_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace practice

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::practice::ServiceProvider> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::practice::ServiceProvider>() {
  return ::practice::ServiceProvider_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_practice_2ephone_2eproto_INCLUDED
