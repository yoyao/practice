// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: practice.phone.proto

#include "practice.phone.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace practice {
class PhoneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Phone>
      _instance;
} _Phone_default_instance_;
}  // namespace practice
namespace protobuf_practice_2ephone_2eproto {
void InitDefaultsPhoneImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::practice::_Phone_default_instance_;
    new (ptr) ::practice::Phone();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::practice::Phone::InitAsDefaultInstance();
}

void InitDefaultsPhone() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPhoneImpl);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::practice::Phone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::practice::Phone, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::practice::Phone, phonenumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::practice::Phone, provider_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::practice::Phone, area_code_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::practice::Phone)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::practice::_Phone_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "practice.phone.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024practice.phone.proto\022\010practice\"h\n\005Phon"
      "e\022\n\n\002id\030\001 \001(\005\022\023\n\013phonenumber\030\002 \001(\t\022+\n\010pr"
      "ovider\030\003 \001(\0162\031.practice.ServiceProvider\022"
      "\021\n\tarea_code\030\004 \001(\005*E\n\017ServiceProvider\022\017\n"
      "\013ChinaMobile\020\000\022\017\n\013ChinaUnicom\020\001\022\020\n\014China"
      "Telecom\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 217);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "practice.phone.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_practice_2ephone_2eproto
namespace practice {
const ::google::protobuf::EnumDescriptor* ServiceProvider_descriptor() {
  protobuf_practice_2ephone_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_practice_2ephone_2eproto::file_level_enum_descriptors[0];
}
bool ServiceProvider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Phone::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Phone::kIdFieldNumber;
const int Phone::kPhonenumberFieldNumber;
const int Phone::kProviderFieldNumber;
const int Phone::kAreaCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Phone::Phone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_practice_2ephone_2eproto::InitDefaultsPhone();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:practice.Phone)
}
Phone::Phone(const Phone& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  phonenumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.phonenumber().size() > 0) {
    phonenumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phonenumber_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&area_code_) -
    reinterpret_cast<char*>(&id_)) + sizeof(area_code_));
  // @@protoc_insertion_point(copy_constructor:practice.Phone)
}

void Phone::SharedCtor() {
  phonenumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&area_code_) -
      reinterpret_cast<char*>(&id_)) + sizeof(area_code_));
  _cached_size_ = 0;
}

Phone::~Phone() {
  // @@protoc_insertion_point(destructor:practice.Phone)
  SharedDtor();
}

void Phone::SharedDtor() {
  phonenumber_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Phone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Phone::descriptor() {
  ::protobuf_practice_2ephone_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_practice_2ephone_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Phone& Phone::default_instance() {
  ::protobuf_practice_2ephone_2eproto::InitDefaultsPhone();
  return *internal_default_instance();
}


void Phone::Clear() {
// @@protoc_insertion_point(message_clear_start:practice.Phone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phonenumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&area_code_) -
      reinterpret_cast<char*>(&id_)) + sizeof(area_code_));
  _internal_metadata_.Clear();
}

bool Phone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:practice.Phone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string phonenumber = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenumber()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phonenumber().data(), static_cast<int>(this->phonenumber().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "practice.Phone.phonenumber"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .practice.ServiceProvider provider = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_provider(static_cast< ::practice::ServiceProvider >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 area_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:practice.Phone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:practice.Phone)
  return false;
#undef DO_
}

void Phone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:practice.Phone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string phonenumber = 2;
  if (this->phonenumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phonenumber().data(), static_cast<int>(this->phonenumber().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "practice.Phone.phonenumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->phonenumber(), output);
  }

  // .practice.ServiceProvider provider = 3;
  if (this->provider() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->provider(), output);
  }

  // int32 area_code = 4;
  if (this->area_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->area_code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:practice.Phone)
}

::google::protobuf::uint8* Phone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:practice.Phone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string phonenumber = 2;
  if (this->phonenumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phonenumber().data(), static_cast<int>(this->phonenumber().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "practice.Phone.phonenumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phonenumber(), target);
  }

  // .practice.ServiceProvider provider = 3;
  if (this->provider() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->provider(), target);
  }

  // int32 area_code = 4;
  if (this->area_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->area_code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:practice.Phone)
  return target;
}

size_t Phone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:practice.Phone)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string phonenumber = 2;
  if (this->phonenumber().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phonenumber());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // .practice.ServiceProvider provider = 3;
  if (this->provider() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->provider());
  }

  // int32 area_code = 4;
  if (this->area_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->area_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Phone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:practice.Phone)
  GOOGLE_DCHECK_NE(&from, this);
  const Phone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Phone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:practice.Phone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:practice.Phone)
    MergeFrom(*source);
  }
}

void Phone::MergeFrom(const Phone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:practice.Phone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phonenumber().size() > 0) {

    phonenumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phonenumber_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.provider() != 0) {
    set_provider(from.provider());
  }
  if (from.area_code() != 0) {
    set_area_code(from.area_code());
  }
}

void Phone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:practice.Phone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Phone::CopyFrom(const Phone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:practice.Phone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Phone::IsInitialized() const {
  return true;
}

void Phone::Swap(Phone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Phone::InternalSwap(Phone* other) {
  using std::swap;
  phonenumber_.Swap(&other->phonenumber_);
  swap(id_, other->id_);
  swap(provider_, other->provider_);
  swap(area_code_, other->area_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Phone::GetMetadata() const {
  protobuf_practice_2ephone_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_practice_2ephone_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace practice
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::practice::Phone* Arena::Create< ::practice::Phone >(Arena* arena) {
  return Arena::CreateInternal< ::practice::Phone >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
